package cn.npnt.tiaps.service.impl;import java.io.File;import java.security.MessageDigest;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.apache.commons.fileupload.FileItem;import org.apache.commons.lang.StringUtils;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import cn.npnt.tiaps.base.vo.QueryParamVO;import cn.npnt.tiaps.constants.Constants;import cn.npnt.tiaps.dao.UserDao;import cn.npnt.tiaps.entity.User;import cn.npnt.tiaps.service.UserService;import cn.npnt.tiaps.vo.UserBrief;import cn.npnt.tiaps.vo.UserVO;import com.sun.org.apache.xml.internal.security.utils.Base64;/** * @company 新和新拓（北京）科技有限公司 * @author Recoba Gan * @createDate 2011 2011-12-16 下午1:51:52 * @description 用户业务接口实现类 */public class UserServiceImpl implements UserService {	private Log logger =  LogFactory.getLog(UserServiceImpl.class);		private UserDao userDao;		public void setUserDao(UserDao userDao) {		this.userDao = userDao;	}	/*	 * (non-Javadoc)	 * @see com.newplusnew.tryIt.api.service.UserService#createUser(com.newplusnew.tryIt.api.entity.User)	 */	@Override	public User createUser(User user) {		logger.info("createUser : " + user.getNickname());		long id  = userDao.insert(user);		user.setId(id);		return user;	}	@Override	public List<User> getAll() {		logger.info("getAll");		return userDao.findAll(User.class, "id");	}	/*	 * (non-Javadoc)	 * @see cn.npnt.tiaps.service.UserService#getRecommenders(java.lang.Integer)	 */	@Override	public List<UserBrief> getRecommenders(Integer sum) {		logger.info("getRecommenders");		List<UserBrief> voList = null;		if(sum != null && sum <= 0){			sum = Constants.DEFAULT_RECOMMENDERS_NUM;		}		List<User> userList = userDao.findRecommendersUser(sum);		if(userList != null){			voList = new ArrayList<UserBrief>();			UserBrief ub = null;			for(User u : userList){				ub = new UserBrief();				ub.setId(u.getId());				ub.setNickname(u.getNickname());  //得到某用户关注的用户昵称				ub.setGender((byte) u.getGender());				ub.setIntroduce(u.getIntroduce());				ub.setProvince(u.getProvince());				ub.setCity(u.getCity());				ub.setFigureUrl(u.getFigureUrl());				ub.setIsMyFollowing(new Boolean(false));     //是否是我关注的				ub.setIsMyFollower(new Boolean(false));      //是否是我的粉丝								voList.add(ub);			}		}		return voList;	}	@Override	public User getUserByNickname(String nickName) {		logger.info("getUserByNickname : " + nickName);		User user = null;		if(StringUtils.isNotBlank(nickName)){			User userCond = new User();			userCond.setNickname(nickName);			List<User> list = userDao.findByCondition(userCond);			if(list != null && list.size() == 1){				user = list.get(0);			}		}		return user;	}	@Override	public User getUserByEmail(String email) {		logger.info("getUserByEmail : " + email);		User user = new User();		user.setEmail(email);		List<User> userList = userDao.findByCondition(user);		if(userList != null && userList.size() == 1){			return userList.get(0);		}		return null;	}	/*	 * 产生用户accessId	 * @see cn.npnt.tiaps.service.UserService#generateAccsessId(cn.npnt.tiaps.entity.User)	 */	@Override	public String generateAccessId(User user) throws Exception {		logger.info("generateAccessId : " + user.getNickname() );		Date current = new Date();		StringBuilder strBuilder = new StringBuilder();		strBuilder.append(user.getEmail()).append(user.getNickname())				.append("+").append(Long.valueOf(current.getTime()).toString())				.append(Constants.TIAPS_DOMAIN_NAME);		MessageDigest digest = MessageDigest.getInstance("MD5");		digest.update(strBuilder.toString().getBytes("UTF-8"));             byte[] md = digest.digest();         String encoded = Base64.encode(md);		return encoded;	}	@Override	public User getUserByAccessId(String accessId) {		User user = new User();		user.setAccessId(accessId);		List<User> userList = userDao.findByCondition(user);		if(userList != null && userList.size() == 1){			return userList.get(0);		}		return null;	}	@Override	public User settingUser(UserVO vo, FileItem fileItem, String uploadPath,			String writeURL) throws Exception{		logger.info("settingUser : userId " + vo.getId() + " nickname " + vo.getNickname());		User result = null;		User user = getUserByAccessId(vo.getAccessId());		long timestamp = new Date().getTime();		if(user != null){			String figureUrl = null;			if(fileItem != null){//用户有上传图片				//产生用户目录				File dirFile = new File(uploadPath);				if(dirFile.exists() == false){					dirFile.mkdir();				}				uploadPath = uploadPath + File.separator + user.getId() + "_" + timestamp + ".jpg";				//判断是否已经存在了用户的头像图片				File oldFigure = new File(uploadPath);				if(oldFigure.exists()){					oldFigure.delete();				}				File newFigure = new File(uploadPath);				fileItem.write(newFigure);				figureUrl = writeURL + user.getId() + "_" + timestamp + ".jpg";			}			if(StringUtils.isNotBlank(vo.getPassword())) user.setPassword(vo.getPassword());			if(StringUtils.isNotBlank(vo.getNickname())) user.setNickname(vo.getNickname());			if(vo.getGender() != null) user.setGender(vo.getGender());			if(StringUtils.isNotBlank(vo.getIntroduce())) user.setIntroduce(vo.getIntroduce());			if(StringUtils.isNotBlank(vo.getMobile())) user.setMobile(vo.getMobile());			if(StringUtils.isNotBlank(vo.getProvince())) user.setProvince(vo.getProvince());			if(StringUtils.isNotBlank(vo.getCity())) user.setCity(vo.getCity());			if(figureUrl != null) user.setFigureUrl(figureUrl);			if(vo.getMsgNotifiable() != null) user.setMsgNotifiable(vo.getMsgNotifiable());			if(vo.getEmailNotifiable() != null) user.setEmailNotifiable(vo.getEmailNotifiable());			userDao.update(user);			result = user;		}		return result;	}	@Override	public User getByPK(Long id) throws Exception {		logger.info("getByPK");		return userDao.findByPK(User.class, id);	}	@Override	public List<User> findUser(QueryParamVO param, String searchTerm)			throws Exception {		logger.info("findUser : searchTerm  " + searchTerm);		List<User> list = null;		if(param != null && StringUtils.isNotBlank(searchTerm)){			list = userDao.findUser(param, searchTerm);		}		return list;	}	@Override	public void updateUser(User user) {		logger.info("updateUser : " + user.getIntroduce() + "    " + user.getNickname());		userDao.update(user);	}}