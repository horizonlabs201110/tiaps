package cn.npnt.tiaps.service.impl;import java.awt.Graphics2D;import java.awt.Rectangle;import java.awt.RenderingHints;import java.awt.geom.AffineTransform;import java.awt.image.BufferedImage;import java.awt.image.ColorModel;import java.awt.image.WritableRaster;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Set;import javax.imageio.ImageIO;import org.apache.commons.fileupload.FileItem;import org.apache.commons.lang.StringUtils;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.beans.factory.annotation.Autowired;import cn.npnt.tiaps.base.vo.QueryParamVO;import cn.npnt.tiaps.dao.CommentDao;import cn.npnt.tiaps.dao.FavoriteDao;import cn.npnt.tiaps.dao.FriendshipDao;import cn.npnt.tiaps.dao.LookDao;import cn.npnt.tiaps.dao.OccasionDao;import cn.npnt.tiaps.dao.TimelineDao;import cn.npnt.tiaps.dao.TrendDao;import cn.npnt.tiaps.dao.UserDao;import cn.npnt.tiaps.dao.VoteDao;import cn.npnt.tiaps.entity.Look;import cn.npnt.tiaps.entity.LookStatistic;import cn.npnt.tiaps.entity.LookTrend;import cn.npnt.tiaps.entity.Occasion;import cn.npnt.tiaps.entity.Photo;import cn.npnt.tiaps.entity.Trend;import cn.npnt.tiaps.entity.User;import cn.npnt.tiaps.entity.WearBrand;import cn.npnt.tiaps.service.LookService;import cn.npnt.tiaps.vo.LookVO;import cn.npnt.tiaps.vo.LookVoteVO;import cn.npnt.tiaps.vo.PhotoVO;import cn.npnt.tiaps.vo.UserBrief;import cn.npnt.tiaps.vo.WearBrandVO;public class LookServiceImpl implements LookService {	private Log logger =  LogFactory.getLog(LookServiceImpl.class);	private LookDao lookDao;	private UserDao userDao;	private FriendshipDao friendshipDao; 	private VoteDao	voteDao;	private OccasionDao occasionDao;	private FavoriteDao favoriteDao;	private CommentDao commentDao;	private TrendDao trendDao;	private TimelineDao timelineDao;		@Autowired	public void setLookDao(LookDao lookDao){		this.lookDao = lookDao;	}	@Autowired	public void setUserDao(UserDao userDao){		this.userDao = userDao;	}	@Autowired	public void setFriendshipDao(FriendshipDao friendshipDao){		this.friendshipDao = friendshipDao;	}	@Autowired	public void setVoteDao(VoteDao voteDao){		this.voteDao = voteDao;	}	@Autowired	public void setOccasionDao(OccasionDao occasionDao){		this.occasionDao = occasionDao;	}	@Autowired	public void setFavoriteDao(FavoriteDao favoriteDao){		this.favoriteDao = favoriteDao;	}	@Autowired	public void setCommentDao(CommentDao commentDao){		this.commentDao = commentDao;	}	@Autowired	public void setTrendDao(TrendDao trendDao){		this.trendDao = trendDao;	}		@Autowired	public void setTimelineDao(TimelineDao timelineDao){		this.timelineDao = timelineDao;	}		@Override	public Look createLook(Look look,List<FileItem> files,String uploadPath, String writeURL) throws Exception {		logger.info(look.getUser().getNickname() + "is creating look");		Date current = new Date();		look.setDeleted(false);		look.setCreateTime(current);		LookStatistic lookStatistic = new LookStatistic();		lookStatistic.setLook(look);		look.setLookStatistic(lookStatistic);		look = assembleLookTrend(look);//装配look的主题		long lookId = lookDao.insert(look);		File dirFile = null;		File newFigure = null;		String webURL = null;		String imageType=".jpg";//缺省的图片结尾名称		String fileName = null;		Photo photo = null;		for(FileItem item : files){				fileName = item.getName();				byte index = Byte.parseByte(item.getFieldName());				if(StringUtils.isNotBlank(fileName) && fileName.contains(".")){					try {						imageType = fileName.substring(fileName.lastIndexOf("."),fileName.length());					} catch (RuntimeException e) {						e.printStackTrace();					}				}				//产生用户目录				dirFile = new File(uploadPath);				if(dirFile.exists() == false){					dirFile.mkdir();				}				String thumbPath = uploadPath + File.separator + "thumb_" + lookId + "_" + index + imageType;				uploadPath = uploadPath + File.separator + lookId + "_" + index + imageType;				//判断是否已经存在了图片				File oldFigure = new File(uploadPath);				if(oldFigure.exists()){					oldFigure.delete();				}				newFigure = new File(uploadPath);				item.write(newFigure);				webURL = writeURL + lookId + "_" + index + imageType;				photo = look.getIndexPhoto(index);				photo.setPicUrl(webURL);				photo.setThumbUrl(writeURL + "thumb_" + lookId + "_" + index + imageType);				photo.setLook(look);								File oldThumb = new File(thumbPath);				if(oldThumb.exists()){					oldThumb.delete();				}				File newThumb = new File(thumbPath);				//产生缩略图				InputStream in = new FileInputStream(newFigure);				BufferedImage bis = ImageIO.read(in);				int w = bis.getWidth();				int h = bis.getHeight();				int width = 212;				int height = width * h / w;				int beginY = 0;				if (height > 200) {					beginY = ((height - 200) / 2);					height = 200;				}				bis = resize(bis, width, height);				// 计算X轴坐标				saveSubImage(bis, new Rectangle(0, beginY, width, height), newThumb);				in.close();		}		lookDao.update(look);		return look;	}	@Override	public Look getLookByPK(long lookId) {		logger.info("getLookByPK : " + lookId);		return lookDao.findByPK(Look.class, lookId);	}	@Override	public Look deleteLook(Look look) {		logger.info("deleteLook : " + look.getId());		look.setDeleted(true);		lookDao.update(look);		return look;	}	@Override	public byte disputeLook(Look look) {		logger.info("disputeLook : " + look.getId());		if(new Date().getTime() - look.getCreateTime().getTime() >= 48*3600000				|| voteDao.findLookVotedCount(look.getId()) >= 20){			List<Integer> list = voteDao.findLookVotedData(look.getId());			if(list == null || list.size() == 0) look.getLookStatistic().setVerdict((byte)-2);//无仲裁结果			else{				byte maxIndex = -2;//得票率最高的那个图片的坐标				long count = 0;				for(Integer i : list){					if(i > 0 && i > count){//由于0为都喜欢，不在统计喜欢第几张的范畴之内						count = i;					}				}				if(count > 0){//表示有结果了，有人投了票了，且是最高得票					maxIndex = (byte) list.indexOf(count);				}				look.getLookStatistic().setVerdict(maxIndex);			}			lookDao.update(look);		}		return look.getLookStatistic().getVerdict();	}	@Override	public List<Look> getUserLooks(User user , QueryParamVO paramVO) throws Exception{		logger.info("getUserLooks : " + user.getId() + "   " + user.getNickname());		List<Look> lookList = null;		if(user != null){			List<User> userList = userDao.findByCondition(user);			if(userList != null && userList.size() == 1){				user = userList.get(0);				lookList = lookDao.findUserLookList(user.getId(), paramVO);			}		}		return lookList;	}	@Override	public LookVO convertToVO(Look reporterLook,User currUser) {		if(reporterLook != null){			Look look = null;			LookVO vo = new LookVO();			if(reporterLook.getLookByOriginalId() == null){				look = reporterLook;				vo.setId(look.getId());			}else{				look = lookDao.findByPK(Look.class, reporterLook.getLookByOriginalId().getId());				vo.setId(reporterLook.getId());			}			DateFormat formator = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");			//assemble user data			User user = look.getUser();			user = userDao.findByPK(User.class, user.getId());			UserBrief ub = new UserBrief();			ub.setId(user.getId());			ub.setNickname(user.getNickname());			ub.setGender((byte) user.getGender());			ub.setFigureUrl(user.getFigureUrl());			ub.setIntroduce(user.getIntroduce());			ub.setProvince(user.getProvince());			ub.setCity(user.getCity());			if(currUser != null && currUser.getId() != user.getId()){//如果发现微博的拥有者和当前用户的id一致的时候，将不返回两位用户之间的关系数据				ub.setIsMyFollower(friendshipDao.isFollower(currUser.getId(), user.getId()));				ub.setIsMyFollowing(friendshipDao.isFollowing(currUser.getId(), user.getId()));			}			vo.setUserBrief(ub);			if(reporterLook.getLookByOriginalId() != null){//表明为转发的微博				vo.setReportText(reporterLook.getText());				ub = new UserBrief();				User reporter = userDao.findByPK(User.class, reporterLook.getUser().getId());				ub.setId(reporter.getId());				ub.setNickname(reporter.getNickname());				ub.setGender((byte) reporter.getGender());				ub.setFigureUrl(reporter.getFigureUrl());				ub.setIntroduce(reporter.getIntroduce());				ub.setProvince(reporter.getProvince());				ub.setCity(reporter.getCity());				if(currUser != null && currUser.getId() != reporter.getId()){//如果发现微博的拥有者和当前用户的id一致的时候，将不返回两位用户之间的关系数据					ub.setIsMyFollower(friendshipDao.isFollower(currUser.getId(), reporter.getId()));					ub.setIsMyFollowing(friendshipDao.isFollowing(currUser.getId(), reporter.getId()));				}				vo.setReporterBrief(ub);			}			//assembel photo data			Set<Photo> photos = look.getPhotos();			PhotoVO photoVO = null;			Set<WearBrandVO> wearBrandVOList = null;			List<PhotoVO> photoVOList = new LinkedList<PhotoVO>();			for(Photo eachPt : photos){				photoVO = new PhotoVO();				photoVO.setIndex(eachPt.getIndex());				photoVO.setPicUrl(eachPt.getPicUrl());				photoVO.setShopUrl(eachPt.getShopUrl());				photoVO.setThumbUrl(eachPt.getThumbUrl());				if(eachPt.getWearBrands() != null){					wearBrandVOList = new HashSet<WearBrandVO>();					for(WearBrand wb : eachPt.getWearBrands()){						wearBrandVOList.add(new WearBrandVO(wb.getBrand(),wb.getClothing()));					}				}				photoVO.setWareBrands(wearBrandVOList);				photoVOList.add(eachPt.getIndex(), photoVO);			}			vo.setPhotos(photoVOList);						//assemble vote data			List <Integer> voteList = voteDao.findLookVotedData(look.getId());			if(voteList != null && voteList.size() > 0){				LookVoteVO voteVO = null;				List<LookVoteVO> voteVOList = new LinkedList<LookVoteVO>();				for(int i=0;i < voteList.size();i++){					voteVO = new LookVoteVO();					voteVO.setIndex(i);					voteVO.setCount(voteList.get(i));					voteVOList.add(voteVO);				}				vo.setVotes(voteVOList);			}			//assemble more data with look			LookStatistic lookStatistic = look.getLookStatistic();			if(lookStatistic.getVistedCount() != -1){//调用裁决service，得到结果				vo.setVerdict("1");//需要调用一个接口去做裁决的事情			}else{				vo.setVerdict(Byte.toString(lookStatistic.getVerdict()));			}			vo.setText(look.getText());			vo.setOccasion(occasionDao.findByPK(Occasion.class, look.getOccasionId()).getTitle());			if(currUser != null){				vo.setHasVoted(voteDao.isUserVotedLook(currUser.getId(), look.getId()));				vo.setHasFavorited(favoriteDao.isUserAddFavorite(currUser.getId(), look.getId()));			}else{				vo.setHasVoted(false);				vo.setHasFavorited(false);			}			vo.setCommentCount(commentDao.findLookCommentCount(reporterLook.getId()));//查询是查当前look的，而不是查原始的look			vo.setFavoriteCount((long)lookStatistic.getFavoritedCount());			vo.setRepostCount((long)lookStatistic.getRepostCount());			vo.setDateTime(formator.format(reporterLook.getCreateTime()));			return vo;		}else		return null;	}		@Override	public List<Look> getSystemRecommend(QueryParamVO param) throws Exception {		logger.info(" getSystemRecommend ");		return lookDao.findSystemRecommend(param);	}	//装配look的主题	private Look assembleLookTrend(Look look){		String content = look.getText();		if(content.contains("#")){			Trend paramTrend = new Trend();			List<Trend> trendList = null;			LookTrend lookTrend = null;			Set<LookTrend> trends = new HashSet<LookTrend>();			for(int i=0;i<content.length();i++){				if(content.charAt(i) == '#'){				sec:for(int j=i+1;j<content.length();j++){						if(content.charAt(j) == '#'){							paramTrend.setTitle(content.substring(i+1,j));							trendList = trendDao.findByCondiiton(paramTrend);							if(trendList != null && trendList.size() == 1){								lookTrend = new LookTrend(look,trendList.get(0));								trends.add(lookTrend);							}							i = j+1;							break sec;						}					}				}			}			if(trends != null && trends.size() > 0){				look.setLookTrends(trends);			}		}		return look;	}		@Override	public List<Look> getTimeLineHome(QueryParamVO param,Map<String,Object> other) throws Exception {		logger.info(" getTimeLineHome ");		List<Look> lookList = null;		Long sinceId = null;		Long maxId = null;		if(other != null){			logger.info(" sinceId " + other.get("sinceId"));			logger.info(" maxId " + other.get("maxId"));			if(other.get("sinceId") != null){				sinceId = (Long)other.get("sinceId");			}			if(other.get("maxId") != null){				maxId = (Long)other.get("maxId");			}		}		List<Long> lookIdList = timelineDao.getTimelineUserId(param, sinceId, maxId);		if(lookIdList != null && lookIdList.size() > 0){			lookList = lookDao.findLooksByIds(lookIdList);		}		return lookList;	}		@Override	public Look repostLook(Look look,Look reporterLook) {		logger.info("repostLook : original lookId " + look.getId());		Look originalLook = null;		if(look.getLookByOriginalId() == null){			originalLook = look;		}else{			originalLook = lookDao.findByPK(Look.class, look.getLookByOriginalId().getId());		}		LookStatistic lookStatistic = new LookStatistic();		lookStatistic.setFavoritedCount(0);		lookStatistic.setHotter(0);		lookStatistic.setLook(reporterLook);		lookStatistic.setNominal(0);		lookStatistic.setReportAbuse(0);		lookStatistic.setRepostCount(0);		lookStatistic.setVerdict((byte)-1);		lookStatistic.setVistedCount(0);		reporterLook.setCreateTime(new Date());		reporterLook.setDeleted(false);		reporterLook.setLookByOriginalId(originalLook);		reporterLook.setLookByParentId(look);		reporterLook.setLookStatistic(lookStatistic);		reporterLook.setVersion(0);		reporterLook = assembleLookTrend(reporterLook);//装配look的主题		reporterLook.setOccasionId(originalLook.getOccasionId());		lookDao.insert(reporterLook);		logger.info(" repostLookId " + reporterLook.getId() + " reposterUserId " + reporterLook.getUser().getId());		originalLook.getLookStatistic().setRepostCount(originalLook.getLookStatistic().getRepostCount() + 1);		lookDao.update(originalLook);		return reporterLook;	}		/*	 * (non-Javadoc)	 * @see cn.npnt.tiaps.service.LookService#manageLookVisitCount(cn.npnt.tiaps.entity.Look)	 */	@Override	public void manageLookVisitCount(Look look,int times) throws Exception {		logger.info("manageLookVisitCount : lookId " + look.getId() + " times " + times);		lookDao.manageLookVisitCount(look.getId(), times);	}	@Override	public List<Look> getSearchLook(QueryParamVO param, Map<String, Object> map) {		logger.info(" getSearchLook ");		return lookDao.findLookSearch(param, map);	}	@Override	public List<Look> getLookByPage(QueryParamVO param) {		logger.info("getLookByPage");		return lookDao.findLookByPage(param);	}	@Override	public List<Look> getUsersLook(List<Long> userIdList,			Map<String, Object> param) {		logger.info("getUsersLook");		return lookDao.getUsersLook(userIdList, param);	}		/**	 * 实现缩放后的截图	 * 	 * @param image	 *            缩放后的图像	 * @param subImageBounds	 *            要截取的子图的范围	 * @param subImageFile	 *            要保存的文件	 * @throws IOException	 */	private static void saveSubImage(BufferedImage image,			Rectangle subImageBounds, File subImageFile) throws IOException {		if (subImageBounds.x < 0 || subImageBounds.y < 0				|| subImageBounds.width - subImageBounds.x > image.getWidth()				|| subImageBounds.height - subImageBounds.y > image.getHeight()) {			System.out.println("Bad   subimage   bounds");			return;		}		BufferedImage subImage = image.getSubimage(subImageBounds.x,				subImageBounds.y, subImageBounds.width, subImageBounds.height);		String fileName = subImageFile.getName();		String formatName = fileName.substring(fileName.lastIndexOf('.') + 1);		ImageIO.write(subImage, formatName, subImageFile);	}		 /**       * 实现图像的等比缩放       * @param source       * @param targetW       * @param targetH       * @return       */    private static BufferedImage resize(BufferedImage source, int targetW,            int targetH) {        // targetW，targetH分别表示目标长和宽           int type = source.getType();        BufferedImage target = null;        double sx = (double) targetW / source.getWidth();        double sy = (double) targetH / source.getHeight();        // 这里想实现在targetW，targetH范围内实现等比缩放。如果不需要等比缩放           // 则将下面的if else语句注释即可           if (sx < sy) {            sx = sy;            targetW = (int) (sx * source.getWidth());        } else {            sy = sx;            targetH = (int) (sy * source.getHeight());        }        if (type == BufferedImage.TYPE_CUSTOM) { // handmade               ColorModel cm = source.getColorModel();            WritableRaster raster = cm.createCompatibleWritableRaster(targetW,                    targetH);            boolean alphaPremultiplied = cm.isAlphaPremultiplied();            target = new BufferedImage(cm, raster, alphaPremultiplied, null);        } else            target = new BufferedImage(targetW, targetH, type);        Graphics2D g = target.createGraphics();        // smoother than exlax:           g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,                RenderingHints.VALUE_INTERPOLATION_BICUBIC);        g.drawRenderedImage(source, AffineTransform.getScaleInstance(sx, sy));        g.dispose();        return target;    }}