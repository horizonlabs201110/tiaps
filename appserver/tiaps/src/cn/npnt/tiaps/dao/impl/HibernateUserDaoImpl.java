package cn.npnt.tiaps.dao.impl;import java.sql.SQLException;import java.util.List;import org.apache.commons.lang.StringUtils;import org.hibernate.HibernateException;import org.hibernate.Query;import org.hibernate.Session;import org.springframework.orm.hibernate3.HibernateCallback;import cn.npnt.tiaps.base.dao.impl.HibernateGenericDao;import cn.npnt.tiaps.base.vo.QueryParamVO;import cn.npnt.tiaps.dao.UserDao;import cn.npnt.tiaps.entity.User;public class HibernateUserDaoImpl extends HibernateGenericDao<User, Long> implements UserDao {	@Override	public List<User> findByCondition(User user) {		List<User> list = null;		StringBuilder cond = new StringBuilder("from User where 1=1 ");		if(user != null){			if(user.getId() != null){				cond.append(" and id = " + user.getId());			}			if(StringUtils.isNotBlank(user.getNickname())){				cond.append(" and nickname = '" + user.getNickname() + "' ");			}			if(StringUtils.isNotBlank(user.getEmail())){				cond.append(" and email='" + user.getEmail() + "' ");			}			if(StringUtils.isNotBlank(user.getAccessId())){				cond.append(" and accessId='" + user.getAccessId() + "' ");			}		}		list = getHibernateTemplate().find(cond.toString());		return list;	}		@Override	public List<User> findRecommendersUser(final Integer sum) {		return getHibernateTemplate().execute(new HibernateCallback<List<User>>() {			@Override			public List<User> doInHibernate(Session session) throws HibernateException,					SQLException {						String queryStr = "from User where userType < 0 order by userType ";				Query query = session.createQuery(queryStr);				query.setFirstResult(0);				query.setMaxResults(sum);				return query.list();			}		});	}	@SuppressWarnings("unchecked")	@Override	public User findUserByAccessId(final String accessId) {		User user = null;		if(StringUtils.isNotBlank(accessId)){			final String hql = "from User where accessId= :accessId";			List<User> list = null;			list = getHibernateTemplate().executeFind(new HibernateCallback() {				@Override				public Object doInHibernate(Session session)						throws HibernateException, SQLException {					return session.createQuery(hql).setString("accessId", accessId).list();				}							});			if(list != null && list.size() ==1){				user = list.get(0);			}		}		return user;	}	@SuppressWarnings("unchecked")	@Override	public List<User> findUser(final QueryParamVO param, String searchTerm)throws Exception {		List<User> list = null;		if(param != null && StringUtils.isNotBlank(searchTerm)){			final StringBuilder hql = new StringBuilder(" from User where 1=1 ");			if(StringUtils.isNotBlank(searchTerm)){				hql.append(" and (email like '%" + searchTerm + "%' or nickname like '%" + searchTerm 						+ "%' or city like '%" + searchTerm 						+ "%' or province like '%" + searchTerm 						+ "%')");			}else				hql.append(" and 1>2");			list = 	(List<User>) getHibernateTemplate().execute(new HibernateCallback<Object>() {				public Object doInHibernate(Session session)						throws HibernateException, SQLException {					Query query = session.createQuery(hql.toString());					if(param.pageNO != null && param.pageSize != null){						query.setFirstResult((param.pageNO - 1)*param.pageSize).								setMaxResults(param.pageSize);					}					return query.list();				}			});		}		return list;	}	@SuppressWarnings("unchecked")	@Override	public List<User> findUserByPage(final QueryParamVO param, User user) {		List<User> list = null;		if(param != null){			final StringBuilder hql = new StringBuilder("from User where 1=1 ");			hql.append(" order by ").append(param.orderBy).append(" ").append(param.desc);			list = getHibernateTemplate().executeFind(new HibernateCallback() {				@Override				public Object doInHibernate(Session session)						throws HibernateException, SQLException {					Query query = session.createQuery(hql.toString());					query.setFirstResult((param.pageNO - 1)*param.pageSize)							.setMaxResults(param.pageSize);					return query.list();				}			});		}		return list;	}		}