package cn.npnt.tiaps.dao.impl;import java.sql.SQLException;import java.util.Date;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.hibernate.HibernateException;import org.hibernate.Query;import org.hibernate.Session;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataAccessException;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.orm.hibernate3.HibernateCallback;import cn.npnt.tiaps.base.dao.impl.HibernateGenericDao;import cn.npnt.tiaps.base.vo.QueryParamVO;import cn.npnt.tiaps.dao.FriendshipDao;import cn.npnt.tiaps.entity.Friendship;import cn.npnt.tiaps.entity.User;public class HibernateFriendshipDaoImpl extendsHibernateGenericDao<Friendship, Long> implements FriendshipDao {	private JdbcTemplate jdbcTemplate;		@Autowired	public void setJdbcTemplate(JdbcTemplate jdbcTemplate){		this.jdbcTemplate = jdbcTemplate;	}		@Override	/**	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 2011 2011-12-26 下午11:43:40	 * @description 判断user2是否是在关注user1，即:user2是否是user1的粉丝	 */	public boolean isFollower(long user1, long user2) {		boolean retValue =false;		List<Friendship> list = null;		StringBuilder cond = new StringBuilder("from Friendship where 1=1 ");		cond.append(" and userByFollowingId.id = " + user1);		cond.append(" and userByUserId.id = " + user2);		list = getHibernateTemplate().find(cond.toString());		if(list.size() > 0){			retValue =true;		}		return retValue;	}	@Override	/**	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 2011 2011-12-26 下午11:43:40	 * @description 判断user1是否是在关注user2，即：user1是否是user2的粉丝	 */	public boolean isFollowing(long user1, long user2) {		boolean retValue =false;		List<Friendship> list = null;		StringBuilder cond = new StringBuilder("from Friendship where 1=1 ");		cond.append(" and userByUserId.id = " + user1);		cond.append(" and userByFollowingId.id = " + user2);		list = getHibernateTemplate().find(cond.toString());		if(list.size() > 0){			retValue =true;		}		return retValue;	}	@SuppressWarnings({ "rawtypes", "unchecked" })	@Override	public List<Friendship> getAllFollower(User userParam,  final QueryParamVO queryParam) {		List<Friendship> list = null;		final StringBuilder hql = new StringBuilder("from Friendship where userByFollowingId.id=");		hql.append(queryParam.userId);		hql.append(" order by ");		hql.append(queryParam.orderBy);		hql.append(" ");		hql.append(queryParam.desc);		list = getHibernateTemplate().find(hql.toString());		return list;	}	@SuppressWarnings({ "rawtypes", "unchecked" })	@Override	public List<Friendship> getAllFollowing(User userParam, final QueryParamVO queryParam) {		List<Friendship> list = null;		final StringBuilder hql = new StringBuilder("from Friendship where userByUserId.id=");		hql.append(queryParam.userId);		hql.append(" order by ");		hql.append(queryParam.orderBy);		hql.append(" ");		hql.append(queryParam.desc);		list = getHibernateTemplate().find(hql.toString());		return list;	}	/* (non-Javadoc)	 * @see cn.npnt.tiaps.dao.FriendshipDao#getFollower(cn.npnt.tiaps.entity.User, cn.npnt.tiaps.base.vo.QueryParamVO)	 */	@SuppressWarnings({ "rawtypes", "unchecked" })	@Override	public List<Friendship> getFollower(User userParam, final QueryParamVO queryParam) {		final StringBuilder hql = new StringBuilder("from Friendship where userByFollowingId.id=");		hql.append(queryParam.userId);		hql.append(" order by ");		hql.append(queryParam.orderBy);		hql.append(" ");		hql.append(queryParam.desc);		return getHibernateTemplate().executeFind(new HibernateCallback() {			@Override			public Object doInHibernate(Session session)					throws HibernateException, SQLException {				Query query = session.createQuery(hql.toString());				return query.setFirstResult((queryParam.pageNO - 1)*queryParam.pageSize).						setMaxResults(queryParam.pageSize).list();			}		});	}	/* (non-Javadoc)	 * @see cn.npnt.tiaps.dao.FriendshipDao#getFollowing(cn.npnt.tiaps.entity.User, cn.npnt.tiaps.base.vo.QueryParamVO)	 */	@SuppressWarnings({ "rawtypes", "unchecked" })	@Override	public List<Friendship> getFollowing(User userParam, final QueryParamVO queryParam) {		final StringBuilder hql = new StringBuilder("from Friendship where userByUserId.id=");		hql.append(queryParam.userId);		hql.append(" order by");		hql.append(queryParam.orderBy);		hql.append(" ");		hql.append(queryParam.desc);		return getHibernateTemplate().executeFind(new HibernateCallback() {			@Override			public Object doInHibernate(Session session)					throws HibernateException, SQLException {				Query query = session.createQuery(hql.toString());				return query.setFirstResult((queryParam.pageNO - 1)*queryParam.pageSize).						setMaxResults(queryParam.pageSize).list();			}		});	}	/* (non-Javadoc)	 * @see cn.npnt.tiaps.dao.FriendshipDao#getfollowerCount(cn.npnt.tiaps.entity.User)	 */	@Override	public Long getfollowerCount(User userParam) {		Long count = null;		StringBuffer queryTemp=new StringBuffer();		queryTemp.append("select count(*) from Friendship where userByFollowingId.id=");		queryTemp.append(userParam.getId());		if(userParam.getInformed() != null){			queryTemp.append(" and informed = ").append(userParam.getInformed()?1:0);					}		count = (Long)getHibernateTemplate().find(queryTemp.toString()).listIterator().next(); 		return count;	}	/* (non-Javadoc)	 * @see cn.npnt.tiaps.dao.FriendshipDao#getfollowingCount(cn.npnt.tiaps.entity.User)	 */	@Override	public Long getfollowingCount(User userParam) {		Long count = null;		StringBuffer queryTemp=new StringBuffer();		queryTemp.append("select count(*) from Friendship where userByUserId.id=");       		queryTemp.append(userParam.getId());		count = (Long)getHibernateTemplate().find(queryTemp.toString()).listIterator().next(); 		return count;	}	/* (non-Javadoc)	 * @see cn.npnt.tiaps.dao.FriendshipDao#getFriendship(long, long)	 */	@Override	public Friendship getFriendship(long user1, long user2) {		Friendship retValue =new Friendship();		List<Friendship> list = null;		StringBuilder cond = new StringBuilder("from Friendship where 1=1 ");		cond.append(" and userByUserId.id = " + user1);		cond.append(" and userByFollowingId.id = " + user2);		list = getHibernateTemplate().find(cond.toString());		if(list.size() > 0){			retValue = list.get(0);		}		return retValue;	}	@Override	public Integer findUserFollowersNumByDate(String beginDate, String endDate,Long userId) {		StringBuilder sql = new StringBuilder("select count(*) from friendship where following_id=");		sql.append(userId);		if(StringUtils.isNotBlank(beginDate)){			sql.append(" and create_time >= '").append(beginDate).append("'");		}		if(StringUtils.isNotBlank(endDate)){			sql.append(" and create_time <= '").append(endDate).append("'");		}		System.err.println(sql.toString());		return jdbcTemplate.queryForInt(sql.toString());	}	@Override	public void doInformed(Map<String, Object> param) {		int invokedNum = 0;		if(param != null){			if(param.get("followingId") != null || param.get("id") != null){				StringBuilder sql = new StringBuilder(" update friendship set informed = 1 where 1=1 ");				if(param.get("followingId") != null){					sql.append(" and following_id = ").append(param.get("followingId"));				}				if(param.get("id") != null){					sql.append(" and id=").append(param.get("id"));				}				invokedNum = jdbcTemplate.update(sql.toString());			}		}	}}