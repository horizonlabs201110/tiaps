package cn.npnt.tiaps.dao.impl;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.hibernate.HibernateException;import org.hibernate.Query;import org.hibernate.Session;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataAccessException;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.StatementCallback;import org.springframework.orm.hibernate3.HibernateCallback;import cn.npnt.tiaps.base.dao.impl.HibernateGenericDao;import cn.npnt.tiaps.base.vo.QueryParamVO;import cn.npnt.tiaps.dao.LookDao;import cn.npnt.tiaps.entity.Look;public class HibernateLookDaoImpl extends HibernateGenericDao<Look, Long>		implements LookDao {		private JdbcTemplate jdbcTemplate;		@Autowired	public void setJdbcTemplate(JdbcTemplate jdbcTemplate){		this.jdbcTemplate = jdbcTemplate;	}		@SuppressWarnings({ "unchecked", "rawtypes" })	@Override	public List<Look> findUserLookList(long userId , final QueryParamVO paramVO) {		final StringBuilder hql = new StringBuilder("from Look where user.id=").append(userId);		if(paramVO.sinceId != null && paramVO.sinceId > 0){			hql.append(" and id < ").append(paramVO.sinceId);		}		hql.append(" order by").append(paramVO.orderBy).append(" ").append(paramVO.desc);		return getHibernateTemplate().executeFind(new HibernateCallback() {			@Override			public Object doInHibernate(Session session)					throws HibernateException, SQLException {				Query query = session.createQuery(hql.toString());				return query.setFirstResult((paramVO.pageNO - 1)*paramVO.pageSize).						setMaxResults(paramVO.pageSize).list();			}		});	}	@SuppressWarnings({ "unchecked", "rawtypes" })	@Override	public List<Look> findSystemRecommend(final QueryParamVO paramVO)			throws Exception {		final StringBuilder hql = new StringBuilder("from Look where lookByOriginalId = null ");		if(paramVO.maxId != null && paramVO.maxId > 0){			hql.append(" and id >").append(paramVO.maxId);		}		if(paramVO.sinceId != null && paramVO.sinceId > 0){			hql.append(" and id <").append(paramVO.sinceId);		}		hql.append(" order by (lookStatistic.nominal+lookStatistic.hotter) ").append(paramVO.desc);		return getHibernateTemplate().executeFind(new HibernateCallback() {			@Override			public Object doInHibernate(Session session) throws HibernateException,					SQLException {				Query query = session.createQuery(hql.toString());				logger.info(hql.toString() + " pageNO : " + paramVO.pageNO + " pageSize : " + paramVO.pageSize);				return query.setFirstResult((paramVO.pageNO - 1)*paramVO.pageSize).						setMaxResults(paramVO.pageSize).list();			}		});	}	@SuppressWarnings("unchecked")	@Override	public List<Look> findLooksByIds(List<Long> ids) throws Exception {		List<Look> list = null;		if(ids != null && ids.size() > 0){			StringBuilder hql = new StringBuilder("from Look where id in(");			for(Long id : ids){				hql.append(id).append(",");			}			hql.deleteCharAt(hql.length() -1).append(")");			hql.append(" order by id desc ");			list = getHibernateTemplate().find(hql.toString());		}		return list;	}	@Override	public Look manageLookFavorite(Look look, Integer times) throws Exception {		if(look != null){			look = findByPK(Look.class, look.getId());			look.getLookStatistic().setFavoritedCount(look.getLookStatistic().getFavoritedCount() + times);			getHibernateTemplate().update(look);		}		return look;	}	@Override	public void manageLookVisitCount(Long lookId, int times) throws Exception {		String sql = "update look_statistic set visted_count = visted_count + " + times + " where id = " + lookId;		jdbcTemplate.update(sql);	}	@SuppressWarnings("unchecked")	@Override	public List<Look> findLookSearch(final QueryParamVO param, Map<String, Object> map) {		final StringBuilder hql = new StringBuilder("from Look where 1=1 ");		if(map != null){			if(map.containsKey("gender")){				Object gender = map.get("gender");				if(gender != null){					hql.append(" and user.gender=").append(gender);				}			}			if(map.containsKey("occasionId")){				Object occasionId = map.get("occasionId");				if(occasionId != null){					hql.append(" and occasionId =").append(occasionId);				}			}			if(map.containsKey("text")){				Object text = map.get("text");				if(text != null){					hql.append(" and searchText like '%").append(text).append("%' ");				}			}		}		hql.append(" order by id desc ");		return getHibernateTemplate().executeFind(new HibernateCallback() {			@Override			public Object doInHibernate(Session session)					throws HibernateException, SQLException {				Query query = session.createQuery(hql.toString());				query.setFirstResult((param.pageNO - 1)*param.pageSize)						.setMaxResults(param.pageSize);				return query.list();			}		});	}	@Override	public List<Look> findSonOfLooks(long id) {		String hql = "from Look where lookByParentId=" + id;		return getHibernateTemplate().find(hql);	}	@Override	public Integer findUserPostLookNum(String beginDate,String endDate,			Boolean isNative, Long userId) {		StringBuilder sql = new StringBuilder("select count(*) from look where user_id=");		sql.append(userId);		if(isNative != null && isNative ==true){			sql.append(" and original_id is NULL and parent_id is NULL ");		}		if(StringUtils.isNotBlank(beginDate)){			sql.append(" and create_time >='").append(beginDate).append("'");		}		if(StringUtils.isNotBlank(endDate)){			sql.append(" and create_time <='").append(endDate).append("'");		}		return jdbcTemplate.queryForInt(sql.toString());	}	@Override	public Integer findBeenRepostNum(String beginDate, String endDate, Long lookId,			Long userId) {		StringBuffer sql = new StringBuffer("select count(*) from look where original_id in(");		sql.append("select id from look where user_id =")			.append(userId).append(")").append("and user_id !=").append(userId);		if(lookId != null){			sql.append(" and id=").append(lookId);		}		return jdbcTemplate.queryForInt(sql.toString());	}		@SuppressWarnings("unchecked")	@Override	public List<Look> findLookByPage(final QueryParamVO param){		List<Look> list = null;		final StringBuilder sql = new StringBuilder("from Look where 1=1 ");		if(param.sinceId != null){			sql.append(" and id <").append(param.sinceId);		}		sql.append(" order by id desc ");		list = getHibernateTemplate().executeFind(new HibernateCallback() {			@Override			public Object doInHibernate(Session session)					throws HibernateException, SQLException {				Query query = session.createQuery(sql.toString());				query.setFirstResult((param.pageNO - 1)*param.pageSize)						.setMaxResults(param.pageSize);				return query.list();			}		});		return list ;	}	@Override	public Integer findBeanRepostLook(String beginDate, String endDate,			Long lookId) {		StringBuilder sql = new StringBuilder("select count(*) from look where original_id =");		sql.append(lookId).append("  and user_id != ").append(lookId);		if(StringUtils.isNotBlank(beginDate)){			sql.append(" and create_time >='").append(beginDate).append("' ");		}		if(StringUtils.isNotBlank(endDate)){			sql.append(" and create_time <='").append(endDate).append("' ");		}		return jdbcTemplate.queryForInt(sql.toString());	}	@Override	public List<Look> getUsersLook(List<Long> userIdList,			Map<String, Object> param) {		List<Look> lookList = null;		if(userIdList != null && userIdList.size() > 0 && param != null){			String sinceDate = (String)param.get("sinceDate");			final int limitNum = (Integer) param.get("limit");			final StringBuilder hql = new StringBuilder(" from Look where 1=1 ");			hql.append(" and createTime >='").append(sinceDate).append("' and user.id in(");			for(Long l : userIdList){				hql.append(l).append(",");			}			hql.deleteCharAt(hql.length() -1).append(")");			hql.append(" order by id desc ");						lookList = getHibernateTemplate().executeFind(new HibernateCallback() {				@Override				public Object doInHibernate(Session session)						throws HibernateException, SQLException {					Query query = session.createQuery(hql.toString());					query.setFirstResult(0).setMaxResults(limitNum);					return query.list();				}			});		}		return lookList;	}	@Override	public List<Long> findUserLookIds(Map<String, Object> param, long userId) {		final StringBuilder sql = new StringBuilder("select id from look where 1=1 ");		sql.append(" and user_id=").append(userId);		int limit = (Integer) param.get("limit");		String sinceDate = (String) param.get("sinceDate");		sql.append(" and create_time >='").append(sinceDate).append("' order by id desc limit ").append(limit);		final List<Long> lookIdList = new ArrayList<Long>();		jdbcTemplate.execute(new StatementCallback<Object>() {			@Override			public Object doInStatement(Statement stament) throws SQLException,					DataAccessException {				logger.info(sql.toString());				ResultSet rs = stament.executeQuery(sql.toString());				while(rs.next()){					lookIdList.add(rs.getLong(1));				}				rs.close();				return lookIdList;			}					});		return lookIdList;	}}