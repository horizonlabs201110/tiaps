package cn.npnt.tiaps.controller;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import cn.npnt.tiaps.assemble.vo.VoteDataBody;import cn.npnt.tiaps.base.util.WorkerThreadPoolManager;import cn.npnt.tiaps.base.vo.BaseResponseVO;import cn.npnt.tiaps.constants.Constants;import cn.npnt.tiaps.entity.Look;import cn.npnt.tiaps.entity.User;import cn.npnt.tiaps.service.LookService;import cn.npnt.tiaps.service.VoteService;import cn.npnt.tiaps.vo.LookVoteVO;import cn.npnt.tiaps.workSchedule.LookSendTimeline;import com.google.gson.Gson;/** *  * @company 新和新拓（北京）科技有限公司 * @author newnewmac * @createDate 5:14:09 PM Jan 3, 2012 * @description 投票管理 */@Controllerpublic class LookVoteController {	private static final Logger logger = Logger.getLogger(LookVoteController.class);	private Gson gson = new Gson();	private VoteService voteService;	private LookService lookService;	private LookSendTimeline lookSendTimelineWorker;	@Autowired	public void setVoteService(VoteService voteService) {		this.voteService = voteService;	}	@Autowired	public void setLookService(LookService lookService){		this.lookService = lookService;	}	@Autowired	public void setLookSendTimelineWorker(LookSendTimeline worker){		this.lookSendTimelineWorker = worker;	}	/**	 * 	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 5:15:25 PM Jan 3, 2012	 * @description 投票并返回look的投票结果信息	 * @param request	 * @param response	 */	@RequestMapping(value = "lookVote/vote_look", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }			)	public void voteLook(HttpServletRequest request,HttpServletResponse response){		BaseResponseVO responseVO = new BaseResponseVO();		int ret = 1;		String lookId = request.getParameter("lookId");		String photoIndex = request.getParameter("photoIndex");		int photoIndexInt = Integer.parseInt(photoIndex);		if(request.getAttribute("user") != null){			User user = (User)request.getAttribute("user");			Long userIdLng = user.getId();			Long lookIdLng = Long.parseLong(lookId);			try {				long orignalLookId = lookIdLng;//原创的lookId				Look look = lookService.getLookByPK(lookIdLng);				if(look != null){					if(look.getLookByOriginalId()!= null 							&& look.getLookByOriginalId().getId() != null){						orignalLookId = look.getLookByOriginalId().getId();					}					Byte verdict = look.getLookStatistic().getVerdict();					//投票都是做个原创投票					boolean isVoted = voteService.isUserVotedLook(userIdLng, orignalLookId);					List<LookVoteVO> votes = new ArrayList<LookVoteVO>();					VoteDataBody  voteDataBody= new VoteDataBody();					if (!isVoted){	//如果用户没有投过票 ，则执行投票动作						/**投票给原创的look情况,同时转发一条微博信息*/						voteService.voteLook(userIdLng, orignalLookId, photoIndexInt);						this.repostLook(user, look, photoIndexInt);						/**投票给原创的look情况,同时转发一条微博信息*/						if(verdict == -1){//等待裁决，调用裁决接口							verdict = lookService.disputeLook(look);						}						look.getLookStatistic().setVerdict(verdict.byteValue());						//1.调用方法得到verdict						String verdictStr = verdict.toString();						//2.得到某个Look的Vote列表												//调用方法获取某个Look的投票信息						List<Integer> voteList = voteService.findLookVotedData(orignalLookId);						LookVoteVO vo = null;						for(int i=0;i<voteList.size();i++){							vo = new LookVoteVO();							vo.setIndex(i);							vo.setCount(voteList.get(i));							votes.add(vo);						}						//3.组装VoteDataBody对象						voteDataBody.setVerdict(verdictStr);						voteDataBody.setVotes(votes);						responseVO.setBody(voteDataBody);						ret = 0;					}else{//已经投票过了						ret = -40;						List<Integer> voteList = voteService.findLookVotedData(orignalLookId);						LookVoteVO vo = null;						for(int i=0;i<voteList.size();i++){							vo = new LookVoteVO();							vo.setIndex(i);							vo.setCount(voteList.get(i));							votes.add(vo);						}						//3.组装VoteDataBody对象						voteDataBody.setVerdict(verdict.toString());						voteDataBody.setVotes(votes);						responseVO.setBody(voteDataBody);					}				}else{					ret = 20;//look不存在或者已经被删除了				}			}			catch (Exception e) {				e.printStackTrace();				ret = 1;				responseVO = new BaseResponseVO(1,e);			}		}		else{			ret = 5;    //未登录		}			responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * 	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 10:19:41 PM Jan 9, 2012	 * @description 点击我喜欢和我不喜欢同时调用转发微博接口	 * @param user 	 * @param look	 * @param photoIndexInt	 */	private void repostLook(User user, Look look,int photoIndexInt){		String text ="我喜欢这张照片！";		if(photoIndexInt == 0){    //photoIndexInt为0表示都不喜欢			text = Constants.BAD_WORDS;		}else{			text = Constants.GOOD_WORDS;		}		Look reporterLook = new Look();		reporterLook.setUser(user);		reporterLook.setText(text);		reporterLook.setRepostType((byte)1);//点击我喜欢和不喜欢的转发类型		reporterLook = lookService.repostLook(look, reporterLook);		//维护timeline关系数据		try {			lookSendTimelineWorker.setLook(reporterLook);			lookSendTimelineWorker.setUser(user);			WorkerThreadPoolManager wtpm = WorkerThreadPoolManager.getInstance();			wtpm.executeWorker(lookSendTimelineWorker);		} catch (Exception e) {			e.printStackTrace();		}	}	/**	 * @company 新和新拓（北京）科技有限公司	 * @author Recoba Gan	 * @createDate 2012 2012-1-8 下午6:12:38	 * @description 当用户点击一个look进入详情时，为一次有效的访问数量。客户端累计look访问数量，	 * 		当访问数量的条数超过一定数量是，而且在有wifi的情况下批量上访问统计信息	 * 	 * example : {looks:[{count : 2,lookId : 2},{count : 3,lookId : 3}]}	 */	@RequestMapping(value = "/lookVote/increase_visted_count", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }			)	public void increaseVistedCount(HttpServletRequest request,HttpServletResponse response){		int ret = 5;		BaseResponseVO responseVO = new BaseResponseVO();		if(request.getAttribute("user") != null){			try{				String vistedCount = request.getParameter("vistedCount");				JSONObject vistedObj = JSONObject.fromString(vistedCount);				JSONArray array = vistedObj.getJSONArray("looks");				Integer count = null;//访问次数				Long lookId = null;//look的id				List<VoteDataBody> looksVotes = new ArrayList<VoteDataBody>();				if(array !=  null && array.length() > 0){					//2.得到某个Look的Vote列表					List<LookVoteVO> votes = null;					List<Integer> voteList = null;					LookVoteVO vote = null;					Look look = new Look();					VoteDataBody voteDataBody = null;					for(int i=0;i<array.length();i++){						JSONObject o = array.getJSONObject(i);						if(o != null){							count = o.getInt("count");							lookId = o.getLong("lookId");							look.setId(lookId);							//直接调用update访问数量接口，不管look是否存在，不存在则不做任何处理相当于							lookService.manageLookVisitCount(look, count);							//组装返回给客户端的look投票数据							voteList = voteService.findLookVotedData(lookId);							if(voteList !=null && voteList.size() > 0){								voteDataBody= new VoteDataBody();								votes = new ArrayList<LookVoteVO>();								for(int j = 0;i < voteList.size(); j++){									vote = new LookVoteVO();									vote.setIndex(j);									vote.setCount(voteList.get(j));									votes.add(vote);								}								voteDataBody.setId(lookId);								voteDataBody.setVotes(votes);								looksVotes.add(voteDataBody);							}						}					}				}				ret = 0;				if(looksVotes.size() > 0){					responseVO.setBody(looksVotes);				}			}catch(Exception e){				e.printStackTrace();				ret = 1;				responseVO = new BaseResponseVO(ret, e);			}		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e) {			e.printStackTrace();		}	}}