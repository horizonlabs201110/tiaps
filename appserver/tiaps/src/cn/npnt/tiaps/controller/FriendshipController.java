package cn.npnt.tiaps.controller;import java.io.IOException;import java.util.ArrayList;import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import cn.npnt.tiaps.assemble.vo.FollowDataBody;import cn.npnt.tiaps.assemble.vo.FollowersDataBody;import cn.npnt.tiaps.assemble.vo.FollowingsDataBody;import cn.npnt.tiaps.assemble.vo.FriendCount;import cn.npnt.tiaps.assemble.vo.RecommendFollowingsDataBody;import cn.npnt.tiaps.base.vo.BaseResponseVO;import cn.npnt.tiaps.base.vo.QueryParamVO;import cn.npnt.tiaps.constants.Constants;import cn.npnt.tiaps.entity.Friendship;import cn.npnt.tiaps.entity.User;import cn.npnt.tiaps.service.FriendshipService;import cn.npnt.tiaps.service.UserService;import cn.npnt.tiaps.vo.UserBrief;import cn.npnt.tiaps.vo.UserVO;import com.google.gson.Gson;/** *  * @company 新和新拓（北京）科技有限公司 * @author newnewmacnewnewmac * @createDate 12:50:43 PM Dec 29, 2011 * @description 关系接口 */@Controllerpublic class FriendshipController {	private static final Logger logger = Logger.getLogger(FriendshipController.class);	private Gson gson = new Gson();	private UserService userService;	private FriendshipService friendshipService;	@Autowired	public void setUserService(UserService userService) {		this.userService = userService;	}	@Autowired	public void setFriendshipService(FriendshipService friendshipService){		this.friendshipService = friendshipService;	}	/**	 * 	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 12:53:25 PM Dec 29, 2011	 * @description 关注某个用户	 * @param	 */	@RequestMapping(value = "/friendships/follow", method = RequestMethod.GET, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }			)	public void follow(HttpServletRequest request,HttpServletResponse response){		BaseResponseVO responseVO = new BaseResponseVO();;		int ret = 1;		String userId = request.getParameter("userId");		if(request.getAttribute("user") != null){			User user = (User)request.getAttribute("user");			long user2= Long.parseLong(userId);			if(user.getId().longValue() == user2){//自己关注自己，提示客户端				ret = 50;			}else{				try {					long user1 = user.getId();						//判断User1是否关注User2					boolean isfollowing = friendshipService.isFollowing(user1, user2);					logger.info(user1 + " 已经关注了 " + user2);					if (!isfollowing){	//如果user1 没有关注user2 ，则执行关注动作						friendshipService.follow(user1, user2);						logger.info(user1 + " 关注了 " + user2);						FollowDataBody  followDataBody= new FollowDataBody();						FriendCount friendCount  = new FriendCount();						long followingCount = 0;  //关注数						long followerCount = 0;   //粉丝数						followerCount = friendshipService.getfollowerCount(user);						//得到某用户关注的所有人列表						QueryParamVO queryParam = new QueryParamVO();						queryParam.userId = user1;						List<Friendship> friendshipList =friendshipService.getAllFollowing(user, queryParam);						List<UserVO> followsTags = null;						if(friendshipList !=null && friendshipList.size()>0){							followingCount = friendshipList.size();  //得到关注的用户数							followsTags = new ArrayList<UserVO>();							UserVO vo = null;							for(Friendship pojo:friendshipList){								vo = new UserVO();								vo.setId(pojo.getUserByFollowingId().getId());								vo.setNickname(pojo.getUserByFollowingId().getNickname());  //得到某用户关注的用户昵称								followsTags.add(vo);							}						}						friendCount.setFollowerCount(followerCount);						friendCount.setFollowingCount(followingCount);						followDataBody.setFollowsTags(followsTags);						followDataBody.setFriendCount(friendCount);						responseVO.setBody(followDataBody);						ret = 0;					}else{						ret = 51;//已经关注了该用户					}				} catch (Exception e) {					e.printStackTrace();					ret = 1;					responseVO = new BaseResponseVO(1,e);				}			}		}else{			ret = 5;  //未登录		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * 	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 12:53:25 PM Dec 29, 2011	 * @description 取消关注某个用户	 * @param	 */	@RequestMapping(value = "/friendships/unfollow", method = RequestMethod.GET, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }			)	public void unfollow(HttpServletRequest request,HttpServletResponse response){		BaseResponseVO responseVO = new BaseResponseVO();;		int ret = 1;		String userId = request.getParameter("userId");		if(request.getAttribute("user") != null){			User user = (User)request.getAttribute("user");			long user2= Long.parseLong(userId);			try {				long user1 = user.getId();					friendshipService.unfollow(user1, user2);				logger.info(user1 + " 取消关注 " + user2);				FollowDataBody  followDataBody= new FollowDataBody();				FriendCount friendCount  = new FriendCount();				long followingCount = 0;  //关注数				long followerCount = 0;   //粉丝数				followerCount = friendshipService.getfollowerCount(user);				//得到某用户关注的所有人列表				QueryParamVO queryParam = new QueryParamVO();				queryParam.userId = user1;				List<Friendship> friendshipList =friendshipService.getAllFollowing(user, queryParam);				List<UserVO> followsTags = null;				if(friendshipList !=null && friendshipList.size()>0){					followingCount = friendshipList.size();  //得到关注的用户数					followsTags = new ArrayList<UserVO>();					for(Friendship pojo:friendshipList){						UserVO vo = new UserVO();						vo.setId(pojo.getUserByFollowingId().getId());						vo.setNickname(pojo.getUserByFollowingId().getNickname());  //得到某用户关注的用户昵称						followsTags.add(vo);					}				}				friendCount.setFollowerCount(followerCount);				friendCount.setFollowingCount(followingCount);				followDataBody.setFollowsTags(followsTags);				followDataBody.setFriendCount(friendCount);				responseVO.setBody(followDataBody);				ret = 0;			} catch (Exception e) {				e.printStackTrace();				ret = 1;				responseVO = new BaseResponseVO(1,e);			}		}else{			ret = 5;   	//未登录		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * 	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 12:53:25 PM Dec 29, 2011	 * @description 获得关注列表	 * @param	 */	@RequestMapping(value = "/friendships/followings", method = RequestMethod.GET, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }			)	public void followings(HttpServletRequest request,HttpServletResponse response){		int ret = 1;		BaseResponseVO responseVO = new BaseResponseVO();		String userId = request.getParameter("userId");//用户id		String countStr = request.getParameter("count");//返回的个数		String pageStr = request.getParameter("page");//返回结果的页码		try{			QueryParamVO param = new QueryParamVO();			User user = null;			if(StringUtils.isBlank(userId)){				throw new NumberFormatException();			}else{				param.userId = Long.parseLong(userId);				user = new User();				user.setId(param.userId);			}			if(StringUtils.isNotBlank(countStr)){				param.pageSize = Integer.parseInt(countStr);			}			if(StringUtils.isNotBlank(pageStr)){				param.pageNO = Integer.parseInt(pageStr);			}			List<Friendship> friendshipList = friendshipService.getFollowing(user, param);    //获取关注的用户			List<UserBrief> followings = new ArrayList<UserBrief>();;			UserBrief ub = null;			if(friendshipList !=null && friendshipList.size()>0){				for(Friendship pojo:friendshipList){					User followingUserPO = pojo.getUserByFollowingId();   //得到关注的用户对象					ub = new UserBrief();					ub.setId(followingUserPO.getId());					ub.setNickname(followingUserPO.getNickname());  //得到某用户关注的用户昵称					ub.setGender((byte) followingUserPO.getGender());					ub.setIntroduce(followingUserPO.getIntroduce());					ub.setProvince(followingUserPO.getProvince());					ub.setCity(followingUserPO.getCity());					ub.setFigureUrl(followingUserPO.getFigureUrl());					ub.setIsMyFollowing(new Boolean(true));     //是否是我关注的					ub.setIsMyFollower(friendshipService.isFollower(user.getId(), followingUserPO.getId()));      //是否是我的粉丝					followings.add(ub);				}			}			FollowingsDataBody followingsDataBody = new FollowingsDataBody();			followingsDataBody.setFollowings(followings);			responseVO.setBody(followingsDataBody);			ret = 0;		}catch(NumberFormatException e){			ret = 2;//参数错误			responseVO = new BaseResponseVO(ret, e);		}		catch(Exception e){			e.printStackTrace();			responseVO = new BaseResponseVO(ret, e);		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * 	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 12:53:25 PM Dec 29, 2011	 * @description 获得粉丝列表	 * @param	 */	@RequestMapping(value = "/friendships/followers", method = RequestMethod.GET, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }			)	public void followers(HttpServletRequest request,HttpServletResponse response){		int ret = 1;		BaseResponseVO responseVO = new BaseResponseVO();		String userId = request.getParameter("userId");//用户id		String countStr = request.getParameter("count");//返回的个数		String pageStr = request.getParameter("page");//返回结果的页码		try{			QueryParamVO param = new QueryParamVO();			User user = null;			if(StringUtils.isBlank(userId)){				throw new NumberFormatException();			}else{				param.userId = Long.parseLong(userId);				user = new User();				user.setId(param.userId);			}			if(StringUtils.isNotBlank(countStr)){				param.pageSize = Integer.parseInt(countStr);			}			if(StringUtils.isNotBlank(pageStr)){				param.pageNO = Integer.parseInt(pageStr);			}			List<Friendship> friendshipList = friendshipService.getFollower(user, param);			List<UserBrief> followers = new ArrayList<UserBrief>();;			UserBrief ub = null;			if(friendshipList !=null && friendshipList.size()>0){				for(Friendship pojo:friendshipList){					User followerUserPO = pojo.getUserByUserId();   //得到一个粉丝用户对象					ub = new UserBrief();					ub.setId(followerUserPO.getId());					ub.setNickname(followerUserPO.getNickname());  //得到某用户关注的用户昵称					ub.setGender((byte) followerUserPO.getGender());					ub.setIntroduce(followerUserPO.getIntroduce());					ub.setProvince(followerUserPO.getProvince());					ub.setCity(followerUserPO.getCity());					ub.setFigureUrl(followerUserPO.getFigureUrl());					ub.setIsMyFollowing(friendshipService.isFollowing(user.getId(), followerUserPO.getId()));    //是否是我关注的					ub.setIsMyFollower(new Boolean(true));      //是否是我的粉丝					followers.add(ub);				}			}			FollowersDataBody followersDataBody = new FollowersDataBody();			followersDataBody.setFollowers(followers);			responseVO.setBody(followersDataBody);			ret = 0;		}catch(NumberFormatException e){			ret = 2;//参数错误			responseVO = new BaseResponseVO(ret, e);		}		catch(Exception e){			e.printStackTrace();			responseVO = new BaseResponseVO(ret, e);		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * 	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 12:53:25 PM Dec 29, 2011	 * @description 获得推荐的用户列表	 * @param	 */	@RequestMapping(value = "/friendships/recommend", method = RequestMethod.GET, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }			)	public void recommend(HttpServletRequest request,HttpServletResponse response){		int ret = 1;		BaseResponseVO responseVO = new BaseResponseVO();		try{			List<UserBrief> recommendFollowings= userService.getRecommenders(20);			RecommendFollowingsDataBody recommendFollowingsDataBody = new RecommendFollowingsDataBody();			recommendFollowingsDataBody.setRecommendFollowings(recommendFollowings);			responseVO.setBody(recommendFollowingsDataBody);			ret = 0;		}catch(NumberFormatException e){			ret = 2;//参数错误			responseVO = new BaseResponseVO(ret, e);		}		catch(Exception e){			e.printStackTrace();			responseVO = new BaseResponseVO(ret, e);		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * 	 * @company 新和新拓（北京）科技有限公司	 * @author newnewmac	 * @createDate 12:53:25 PM Dec 29, 2011	 * @description 批量关注用户	 * @param	 */	@RequestMapping(value = "/friendships/follow_batch", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }			)	public void follow_batch(HttpServletRequest request,HttpServletResponse response){		BaseResponseVO responseVO = new BaseResponseVO();;		int ret = 1;		String followings = request.getParameter("followings");		JSONObject followingsObj = JSONObject.fromString(followings);		JSONArray followingsAraray = followingsObj.getJSONArray("followings");		if(request.getAttribute("user") != null){			User user = (User)request.getAttribute("user");			try {				long user1 = user.getId();					String following = null;				Long user2 = null;				boolean isfollowing = true;				for(int i=0;i<followingsAraray.length();i++){					following =  followingsAraray.getString(i);					user2 = Long.parseLong(following);					//判断User1是否关注User2					isfollowing = friendshipService.isFollowing(user1, user2);					if (!isfollowing){	//如果user1 没有关注user2 ，则执行关注动作						friendshipService.follow(user1, user2);					}				}				FollowDataBody  followDataBody= new FollowDataBody();				FriendCount friendCount  = new FriendCount();				long followingCount = 0;  //关注数				long followerCount = 0;   //粉丝数				followerCount = friendshipService.getfollowerCount(user);				//得到某用户关注的所有人列表				QueryParamVO queryParam = new QueryParamVO();				queryParam.userId = user1;				List<Friendship> friendshipList =friendshipService.getAllFollowing(user, queryParam);				List<UserVO> followsTags = null;				if(friendshipList !=null && friendshipList.size()>0){					followingCount = friendshipList.size();  //得到关注的用户数					followsTags = new ArrayList<UserVO>();					UserVO vo = null;					for(Friendship pojo:friendshipList){						vo = new UserVO();						vo.setId(pojo.getUserByFollowingId().getId());						vo.setNickname(pojo.getUserByFollowingId().getNickname());  //得到某用户关注的用户昵称						followsTags.add(vo);					}				}				friendCount.setFollowerCount(followerCount);				friendCount.setFollowingCount(followingCount);				followDataBody.setFollowsTags(followsTags);				followDataBody.setFriendCount(friendCount);				responseVO.setBody(followDataBody);				ret = 0;			} catch (Exception e) {				e.printStackTrace();				ret = 1;				responseVO = new BaseResponseVO(1,e);			}		}else{			ret = 5;     //未登录		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e) {			e.printStackTrace();		}	}}