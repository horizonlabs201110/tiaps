package cn.npnt.tiaps.controller;import java.io.File;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import java.util.Random;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.fileupload.FileItem;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import cn.npnt.tiaps.assemble.vo.FindUserBody;import cn.npnt.tiaps.assemble.vo.FriendCount;import cn.npnt.tiaps.assemble.vo.InitData;import cn.npnt.tiaps.assemble.vo.InitDataBody;import cn.npnt.tiaps.assemble.vo.UserBody;import cn.npnt.tiaps.base.vo.BaseResponseVO;import cn.npnt.tiaps.base.vo.QueryParamVO;import cn.npnt.tiaps.constants.Constants;import cn.npnt.tiaps.entity.Friendship;import cn.npnt.tiaps.entity.User;import cn.npnt.tiaps.service.BrandService;import cn.npnt.tiaps.service.CriterionService;import cn.npnt.tiaps.service.FriendshipService;import cn.npnt.tiaps.service.OccasionService;import cn.npnt.tiaps.service.TrendService;import cn.npnt.tiaps.service.UserService;import cn.npnt.tiaps.util.FileUploadUtil;import cn.npnt.tiaps.vo.UserBrief;import cn.npnt.tiaps.vo.UserVO;import com.google.gson.Gson;import com.sun.org.apache.xml.internal.security.utils.Base64;@Controllerpublic class UserController {	private static final Logger logger = Logger.getLogger(UserController.class);		private Gson gson = new Gson();	private UserService userService;	private TrendService trendService;//主题service	private OccasionService occasionService;	private BrandService brandService;	private CriterionService criterionService;	private FriendshipService friendshipService;		@Autowired	public void setUserService(UserService userService) {		this.userService = userService;	}	@Autowired	public void setTrendService(TrendService trendService){		this.trendService = trendService;	}	@Autowired	public void setOccasionService(OccasionService occasionService){		this.occasionService = occasionService;	}	@Autowired	public void setBrandService(BrandService brandService){		this.brandService = brandService;	}	@Autowired	public void setCriterionService(CriterionService criterionService){		this.criterionService = criterionService;	}	@Autowired	public void setFriendshipService(FriendshipService friendshipService){		this.friendshipService = friendshipService;	}	/**	 * 创建用户	 */	@RequestMapping(value = "/user/register", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 })	public void registerUser(HttpServletRequest request,HttpServletResponse response){			int ret = 1;			BaseResponseVO responseVO = null;		try {			String nickname = request.getParameter("nickname");			String password = request.getParameter("password");			String email = request.getParameter("email").trim();			String genderStr = request.getParameter("gender");			int gender = 2;//缺省为未知			if(StringUtils.isNotBlank(genderStr)){				gender = Integer.parseInt(request.getParameter("gender"));			}			if(StringUtils.isBlank(nickname) || StringUtils.isBlank(password) 					|| StringUtils.isBlank(email)){				//缺少参数				responseVO = new BaseResponseVO();				responseVO.getHeader().setRet(2);//邮箱重复了。				String userJson = gson.toJson(responseVO);				response.getWriter().print(userJson);				return;			}			//校验是否已经有该邮箱注册过了			User contUser = userService.getUserByEmail(email);			if(contUser != null){//一个邮箱重复注册				responseVO = new BaseResponseVO();				responseVO.getHeader().setRet(14);//邮箱重复了。				String userJson = gson.toJson(responseVO);				response.getWriter().print(userJson);				return;			}			contUser = userService.getUserByNickname(nickname);			if(contUser != null){//nickname重复了				responseVO = new BaseResponseVO();				responseVO.getHeader().setRet(15);//邮箱重复了。				String userJson = gson.toJson(responseVO);				response.getWriter().print(userJson);				return;			}			User user = new User();			Date currentDate = new Date();			user.setCreateTime(currentDate);			user.setDeleted(false);			user.setEmail(email);			user.setEmailNotifiable(true);			user.setGender(gender);			user.setNickname(nickname);			user.setPassword(getMD5Base64(password));			user.setVersion(1);			user.setAccessId(userService.generateAccessId(user));			user = userService.createUser(user);			UserVO vo = voForUserSelf(user);						InitDataBody initDataBody = new InitDataBody();			InitData initData = new InitData();			initData.setBrands(brandService.getAll());			initData.setOccasions(occasionService.getAllVO());			initData.setTrends(trendService.getAllVO());			initData.setCriterion(criterionService.getAll());			initData.setFriendCount(new FriendCount(0,0));//注册的时候粉丝和关注的人都是为0			initDataBody.setInitData(initData);			initDataBody.setUser(vo);			initDataBody.setRecommendFollowings(userService.getRecommenders(20));						responseVO = new BaseResponseVO();			responseVO.getHeader().setRet(0);			responseVO.setBody(initDataBody);			String userJson = gson.toJson(responseVO);			response.getWriter().print(userJson);		}catch(NumberFormatException e){//参数异常			try {				String mess = gson.toJson(new BaseResponseVO(2,e));				response.getWriter().print(mess);			} catch (IOException e1) {				e1.printStackTrace();			}		}catch(Exception e){			try {				String mess = gson.toJson(new BaseResponseVO(1,e));				response.getWriter().print(mess);			} catch (IOException e1) {				e1.printStackTrace();			}		}			}		/**	 * @company 新和新拓（北京）科技有限公司	 * @author Recoba Gan	 * @createDate 2011 2011-12-19 下午6:22:50	 * @description 用户登录	 */	@RequestMapping(value = "/user/login", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 })	public void login(HttpServletRequest request,HttpServletResponse response){		int ret = 1;//缺省系统错误		BaseResponseVO responseVO = null;		String email = request.getParameter("email");		String password = request.getParameter("password");		if(StringUtils.isNotBlank(email)  && StringUtils.isNotBlank(password)){			InitDataBody initDataBody = new InitDataBody();			try{				responseVO = new BaseResponseVO();				User user = userService.getUserByEmail(email);				if(user == null){					ret = 11;//不存在的用户				}else{					if(!user.getPassword().equals(getMD5Base64(password))){						ret = 12;//密码错误					}else{						ret = 0;//响应正确						UserVO vo = voForUserSelf(user);						InitData initData = new InitData();						initData.setBrands(brandService.getAll());						initData.setOccasions(occasionService.getAllVO());						initData.setTrends(trendService.getAllVO());						initData.setCriterion(criterionService.getAll());						initData.setFriendCount(new FriendCount(								friendshipService.getfollowingCount(user),								friendshipService.getfollowerCount(user)));						initDataBody.setInitData(initData);						initDataBody.setUser(vo);						List<UserVO> followings = new ArrayList<UserVO>();						UserVO tempUserVO = null;						User tempUser = null;						Set<Friendship> followingsShip = user.getFriendshipsForUserId();						for(Friendship friend : followingsShip){							tempUserVO = new UserVO();							//由于hibernate依赖加载默认是支持两层							tempUser = friend.getUserByFollowingId();							tempUserVO.setId(tempUser.getId());							tempUserVO.setNickname(tempUser.getNickname());							followings.add(tempUserVO);						}						initData.setFollowsTags(followings);						responseVO.setBody(initDataBody);						String userJson = gson.toJson(responseVO);						response.getWriter().print(userJson);						return;					}				}				responseVO.getHeader().setRet(ret);				String userJson = gson.toJson(responseVO);				response.getWriter().print(userJson);			}catch(Exception e){				e.printStackTrace();				try {					String mess = gson.toJson(new BaseResponseVO(1,e));					response.getWriter().print(mess);				} catch (IOException e1) {					e1.printStackTrace();				}			}		}else{			//缺少参数			responseVO = new BaseResponseVO();			responseVO.getHeader().setRet(2);			String userJson = gson.toJson(responseVO);			try {				response.getWriter().print(userJson);			} catch (IOException e) {				e.printStackTrace();			}			return;		}	}		/**	 * @company 新和新拓（北京）科技有限公司	 * @author Recoba Gan	 * @createDate 2011 2011-12-20 下午11:02:34	 * @description 用户修改信息	 */	@RequestMapping(value = "/user/setting", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }	)	public void setting(HttpServletRequest request,HttpServletResponse response){		String accessId=request.getHeader("accessId");		BaseResponseVO responseVO = new BaseResponseVO();		int ret = 1;//缺省系统错误		UserBody userBody = null;//gx 修改		UserVO vo = null;		FileUploadUtil uploadUtil = new FileUploadUtil();		Map<String, Object> params = null;		try {			params =  uploadUtil.scaleImage(request);		} catch (Exception e1) {			e1.printStackTrace();		}		if(StringUtils.isNotBlank(accessId)){			try {				User user = userService.getUserByAccessId(accessId);				if(user != null){					FileItem fileItem = null;					String writeURL = Constants.PHOTO_FIGURE_URL;					String uploadPath = request.getServletContext().getRealPath("/")+"images"+File.separator + "figure";					List<FileItem> imageItems = (List<FileItem>)params.get("imageItems");					if(imageItems != null && imageItems.size() == 1){//这里是单个图片（头像缩略图）						fileItem = imageItems.get(0);					}					String password = (String) params.get("password");					String oldPassword = (String) params.get("oldPassword");					/*@小强，接口增加一个oldPassword参数，修改密码时请验证一下。					 * 当两个都不为空，并且oldPassword和数据库密码md5一致时才允许修改密码.否则返回相应的相应代码					*/					if(StringUtils.isNotBlank(oldPassword) && StringUtils.isNotBlank(password)){						if(user.getPassword().equals(getMD5Base64(oldPassword)) == false){//密码不一致							ret = 16;//密码错误							responseVO.getHeader().setRet(ret);							String userJson = gson.toJson(responseVO);							response.getWriter().print(userJson);							return;						}					}else{						password = null;					}					String nickname = (String) params.get("nickname");					if(StringUtils.isNotBlank(nickname)){						User nicknameUser = userService.getUserByNickname(nickname);						if(nicknameUser != null && !nicknameUser.getAccessId().equals(user.getAccessId())){							ret = 15;							responseVO.getHeader().setRet(ret);							String userJson = gson.toJson(responseVO);							response.getWriter().print(userJson);							return;						}					}					String gender = (String) params.get("gender");					String introduce = (String) params.get("introduce");					String mobile = (String) params.get("mobile");					String province = (String) params.get("province");					String city = (String) params.get("city");					String msgNotifiable = (String) params.get("msgNotifiable");					String emailNotifiable = (String) params.get("emailNotifiable");					UserVO param = new UserVO();					param.setAccessId(accessId);					if(StringUtils.isNotBlank(password)) param.setPassword(getMD5Base64(password));					if(StringUtils.isNotBlank(nickname)) param.setNickname(nickname);					if(StringUtils.isNotBlank(gender)) param.setGender(Integer.parseInt(gender));					if(StringUtils.isNotBlank(introduce)) param.setIntroduce(introduce);					if(StringUtils.isNotBlank(mobile)) param.setMobile(mobile);					if(StringUtils.isNotBlank(province)) param.setProvince(province);					if(StringUtils.isNotBlank(city)) param.setCity(city);					if("0".equals(msgNotifiable)){						param.setMsgNotifiable(false);					}else if("1".equals(msgNotifiable)){						param.setMsgNotifiable(true);					}					if("0".equals(emailNotifiable)){						param.setEmailNotifiable(false);					}else if("1".equals(emailNotifiable)){						param.setEmailNotifiable(true);					}										user = userService.settingUser(param, fileItem, uploadPath, writeURL);					vo = voForUserSelf(user);					userBody = new UserBody();					userBody.setUser(vo);					ret = 0;				}else{//不存在的用户					ret = 11;				}			} catch (Exception e) {				ret = 4;//服务器内部出错				e.printStackTrace();			}		}else{			//缺少参数			ret = 2;		}		responseVO.getHeader().setRet(ret);		responseVO.setBody(userBody);//gx 修改		String userJson = gson.toJson(responseVO);		try {			response.getWriter().print(userJson);		} catch (IOException e) {			e.printStackTrace();		}	}		/**	 * @company 新和新拓（北京）科技有限公司	 * @author Recoba Gan	 * @createDate 2012 2012-5-3 下午12:53:24	 * @description 单独用户修改密码接口	 */	@RequestMapping(value = "/user/updatePassword", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 }	)	public void updatePassword(HttpServletRequest request,HttpServletResponse response){		Object o = request.getAttribute("user");		User user = null;		BaseResponseVO responseVO = new BaseResponseVO();		int ret = 1;//缺省系统错误		try {			if(o != null){				user = (User)o;			}			if(user != null){				String password = null;				if(request.getParameter("password") != null){					password = (String)request.getParameter("password");				}				String oldPassword = null;				if(request.getParameter("oldPassword") != null){					oldPassword = (String)request.getParameter("oldPassword");				}				if(StringUtils.isNotBlank(password) && StringUtils.isNotBlank(oldPassword)){					if(user.getPassword().equals(getMD5Base64(oldPassword)) == false){//密码不一致						ret = 16;//密码错误						responseVO.getHeader().setRet(ret);						String userJson = gson.toJson(responseVO);						response.getWriter().print(userJson);						return;					}else{						user.setPassword(getMD5Base64(password));						userService.updateUser(user);						ret = 0;					}				}else					ret = 2;			}else{				//用户未正常登录				ret = 5;			}		} catch (Exception e) {			ret = 1;			e.printStackTrace();			responseVO.getHeader().setErrorMsg(e.toString());		}		responseVO.getHeader().setRet(ret);		String userJson = gson.toJson(responseVO);		try {			response.getWriter().print(userJson);		} catch (IOException e) {			e.printStackTrace();		}	}		@RequestMapping(value = "/user/init", method = RequestMethod.GET, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 })	public void userInit(HttpServletRequest request,HttpServletResponse response){		BaseResponseVO responseVO = new BaseResponseVO();		int ret = 1;		String accessId = request.getHeader("accessId");		if(StringUtils.isNotBlank(accessId)){			try {				User user = userService.getUserByAccessId(accessId);				if(user != null){					InitDataBody initDataBody = new InitDataBody();					InitData initData = new InitData();					initData.setBrands(brandService.getAll());					initData.setOccasions(occasionService.getAllVO());					initData.setTrends(trendService.getAllVO());					initData.setCriterion(criterionService.getAll());					initData.setFriendCount(new FriendCount(							friendshipService.getfollowingCount(user),							friendshipService.getfollowerCount(user)));					QueryParamVO friendshipQuery = new QueryParamVO();					friendshipQuery.userId = user.getId();					List<Friendship> friendshipList =friendshipService.getAllFollowing(user, friendshipQuery);					List<UserVO> followsTags = null;					if(friendshipList !=null && friendshipList.size()>0){						followsTags = new ArrayList<UserVO>();						UserVO vo = null;						for(Friendship pojo:friendshipList){							vo = new UserVO();							vo.setId(pojo.getUserByUserId().getId());							vo.setNickname(pojo.getUserByUserId().getNickname());  //得到某用户关注的用户昵称							followsTags.add(vo);						}					}					initData.setFollowsTags(followsTags);					initDataBody.setInitData(initData);					initDataBody.setUser(voForUserSelf(user));					responseVO.setBody(initDataBody);					ret = 0;				}else{					ret = 5;				}			} catch (Exception e) {				e.printStackTrace();				responseVO = new BaseResponseVO(1, e);				ret = 1;			}		}else{			ret = 5;		}		responseVO.getHeader().setRet(ret);		String userJson = gson.toJson(responseVO);		try {			response.getWriter().print(userJson);		} catch (IOException e) {			e.printStackTrace();		}	}		@RequestMapping(value = "/user/register_third", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 })	public void registerUserByThird(HttpServletRequest request,HttpServletResponse response){		int ret = 1;		BaseResponseVO responseVO = null;		try {			Integer snsType = Integer.parseInt((String)request.getParameter("snsType"));//0:local;1:sina,2:qq			String snsId = (String) request.getParameter("snsId");			String nickname = (String) request.getParameter("nickname");			String email = (String) request.getParameter("email");			String password=(String) request.getParameter("password");			String province = null;			if(request.getParameter("province") != null){				province = (String)request.getParameter("province");			}			String city = null;			if(request.getParameter("city") != null){				city = (String) request.getParameter("city");			}			int gender = 2;			if(request.getParameter("gender") != null){				gender = Integer.parseInt((String) request.getParameter("gender"));			}			//这些参数是必填项			if(StringUtils.isNotBlank(email) && StringUtils.isNotBlank(nickname)					&& StringUtils.isNotBlank(snsId) && snsType != null){				//校验是否已经有该邮箱注册过了				User checkUser = userService.getUserByEmail(email);				if(checkUser != null){//一个邮箱重复注册					responseVO = new BaseResponseVO();					responseVO.getHeader().setRet(14);//邮箱重复了。					String userJson = gson.toJson(responseVO);					response.getWriter().print(userJson);					return;				}				Random random = null;				int repeatNameTimes = 0;				String checkNickname = nickname;				//校验nickname是否重复了				do{					checkUser = userService.getUserByNickname(checkNickname);					if(checkUser != null){						repeatNameTimes ++;						if(random == null) random = new Random();						checkNickname = checkNickname + random.nextInt();						if(checkNickname.length() > 125){							checkNickname = checkNickname.substring(checkNickname.length() - 125, checkNickname.length()-1);						}					}else{						nickname = checkNickname;					}				}while(checkUser != null && repeatNameTimes < 50);				if(repeatNameTimes == 50 && checkUser != null){					logger.info(nickname + " 该用户名注册重复几率太大了");					random = new Random();					repeatNameTimes = 0;					checkNickname = nickname;					do{						repeatNameTimes ++;						checkNickname = random.nextInt() + checkNickname + random.nextInt();						if(checkNickname.length() > 125){							checkNickname = checkNickname.substring(checkNickname.length() - 125, checkNickname.length()-1);						}						checkUser = userService.getUserByNickname(checkNickname);						if(checkUser == null){							nickname = checkNickname;						}					}while(checkUser != null && repeatNameTimes < 10);					if(checkUser != null && repeatNameTimes >= 10){						logger.info("该用户名重复几率大到没法成功注册了，请重新注册nickname");						throw new IllegalArgumentException();					}				}				//执行注册操作				User user = new User();				if(StringUtils.isNotBlank(province)){					user.setProvince(province);				}				if(StringUtils.isNotBlank(city)){					user.setCity(city);				}				user.setCreateTime(new Date());				user.setDeleted(false);				user.setEmail(email);				user.setEmailNotifiable(true);				user.setGender(gender);				user.setNickname(nickname);				user.setSnsType(snsType);				user.setPassword(password);//第三方注册密码为空，所以不需要存入				user.setSnsId(snsId);				user.setVersion(1);				user.setAccessId(userService.generateAccessId(user));				user = userService.createUser(user);				UserVO vo = voForUserSelf(user);								InitDataBody initDataBody = new InitDataBody();				InitData initData = new InitData();				initData.setBrands(brandService.getAll());				initData.setOccasions(occasionService.getAllVO());				initData.setTrends(trendService.getAllVO());				initData.setCriterion(criterionService.getAll());				initData.setFriendCount(new FriendCount(0,0));//注册的时候粉丝和关注的人都是为0				initDataBody.setInitData(initData);				initDataBody.setUser(vo);				initDataBody.setRecommendFollowings(userService.getRecommenders(20));								responseVO = new BaseResponseVO();				responseVO.setBody(initDataBody);				ret = 0;				//后期处理第三方图片地址//				//figure 头像这个是到底post文件过来还是只是一个url地址的呢？？？待确认//				List<FileItem> imageItems = (List<FileItem>)params.get("imageItems");//				if(imageItems != null && imageItems.size() == 1){//头像只允许上传一张图片//					String figureUrl = null;//					String writeURL = Constants.PHOTO_FIGURE_URL;//					String uploadPath = request.getServletContext().getRealPath("/")+"images"+File.separator + "figure";//					File dirFile = new File(uploadPath);//					if(dirFile.exists() == false){//						dirFile.mkdir();//					}//					uploadPath = uploadPath + File.separator + user.getId() + ".jpg";//					//判断是否已经存在了用户的头像图片//					File oldFigure = new File(uploadPath);//					if(oldFigure.exists()){//						oldFigure.delete();//					}//					File newFigure = new File(uploadPath);//					imageItems.get(0).write(newFigure);//					figureUrl = writeURL + user.getId() + ".jpg";//					user.setFigureUrl(figureUrl);//					userService.updateUser(user);//				}			}else{				throw new IllegalArgumentException();			}		}catch(NumberFormatException e){			e.printStackTrace();			ret = 2;			responseVO = new BaseResponseVO(ret, e);		}catch(IllegalArgumentException e){			e.printStackTrace();			ret = 2;			responseVO = new BaseResponseVO(ret, e);		}catch(Exception e){			e.printStackTrace();			ret = 1;			responseVO = new BaseResponseVO(ret, e);		}		try {			if(responseVO == null) responseVO = new BaseResponseVO();			responseVO.getHeader().setRet(ret);			String mess = gson.toJson(responseVO);			response.getWriter().print(mess);		} catch (IOException e1) {			e1.printStackTrace();		}	}		/**	 * @company 新和新拓（北京）科技有限公司	 * @author Recoba Gan	 * @createDate 2012 2012-1-1 下午6:13:20	 * @description 第三方注册用户	 */	@RequestMapping(value = "/user/register_thirdparty", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 })	public void registerUserByThirdparty(HttpServletRequest request,HttpServletResponse response){			int ret = 1;			BaseResponseVO responseVO = null;		try {//			String publicToken = request.getHeader("publicToken");//interceptor check valid or invalid			FileUploadUtil uploadUtil = new FileUploadUtil();			Map<String, Object> params = null;			try {				params =  uploadUtil.scaleImage(request);			} catch (Exception e1) {				e1.printStackTrace();			}			Integer snsType = Integer.parseInt((String)params.get("snsType"));//0:local;1:sina,2:qq			String snsId = (String) params.get("snsId");			String nickname = (String) params.get("nickname");			String email = (String) params.get("email");			String province = null;			if(params.get("province") != null){				province = (String)params.get("province");			}			String city = null;			if(params.get("city") != null){				city = (String) params.get("city");			}			int gender = 2;			if(params.get("gender") != null){				gender = Integer.parseInt((String) params.get("gender"));			}			//这些参数是必填项			if(StringUtils.isNotBlank(email) && StringUtils.isNotBlank(nickname)					&& StringUtils.isNotBlank(snsId) && snsType != null){				//校验是否已经有该邮箱注册过了				User checkUser = userService.getUserByEmail(email);				if(checkUser != null){//一个邮箱重复注册					responseVO = new BaseResponseVO();					responseVO.getHeader().setRet(14);//邮箱重复了。					String userJson = gson.toJson(responseVO);					response.getWriter().print(userJson);					return;				}				Random random = null;				int repeatNameTimes = 0;				String checkNickname = nickname;				//校验nickname是否重复了				do{					checkUser = userService.getUserByNickname(checkNickname);					if(checkUser != null){						repeatNameTimes ++;						if(random == null) random = new Random();						checkNickname = checkNickname + random.nextInt();						if(checkNickname.length() > 125){							checkNickname = checkNickname.substring(checkNickname.length() - 125, checkNickname.length()-1);						}					}else{						nickname = checkNickname;					}				}while(checkUser != null && repeatNameTimes < 50);				if(repeatNameTimes == 50 && checkUser != null){					logger.info(nickname + " 该用户名注册重复几率太大了");					random = new Random();					repeatNameTimes = 0;					checkNickname = nickname;					do{						repeatNameTimes ++;						checkNickname = random.nextInt() + checkNickname + random.nextInt();						if(checkNickname.length() > 125){							checkNickname = checkNickname.substring(checkNickname.length() - 125, checkNickname.length()-1);						}						checkUser = userService.getUserByNickname(checkNickname);						if(checkUser == null){							nickname = checkNickname;						}					}while(checkUser != null && repeatNameTimes < 10);					if(checkUser != null && repeatNameTimes >= 10){						logger.info("该用户名重复几率大到没法成功注册了，请重新注册nickname");						throw new IllegalArgumentException();					}				}				//执行注册操作				User user = new User();				if(StringUtils.isNotBlank(province)){					user.setProvince(province);				}				if(StringUtils.isNotBlank(city)){					user.setCity(city);				}				user.setCreateTime(new Date());				user.setDeleted(false);				user.setEmail(email);				user.setEmailNotifiable(true);				user.setGender(gender);				user.setNickname(nickname);				user.setSnsType(snsType);				user.setSnsId(snsId);				user.setVersion(1);				user.setAccessId(userService.generateAccessId(user));				user = userService.createUser(user);				UserVO vo = voForUserSelf(user);								InitDataBody initDataBody = new InitDataBody();				InitData initData = new InitData();				initData.setBrands(brandService.getAll());				initData.setOccasions(occasionService.getAllVO());				initData.setTrends(trendService.getAllVO());				initData.setCriterion(criterionService.getAll());				initData.setFriendCount(new FriendCount(0,0));//注册的时候粉丝和关注的人都是为0				initDataBody.setInitData(initData);				initDataBody.setUser(vo);				initDataBody.setRecommendFollowings(userService.getRecommenders(20));								responseVO = new BaseResponseVO();				responseVO.setBody(initDataBody);				ret = 0;								//figure 头像这个是到底post文件过来还是只是一个url地址的呢？？？待确认				List<FileItem> imageItems = (List<FileItem>)params.get("imageItems");				if(imageItems != null && imageItems.size() == 1){//头像只允许上传一张图片					String figureUrl = null;					String writeURL = Constants.PHOTO_FIGURE_URL;					String uploadPath = request.getServletContext().getRealPath("/")+"images"+File.separator + "figure";					File dirFile = new File(uploadPath);					if(dirFile.exists() == false){						dirFile.mkdir();					}					uploadPath = uploadPath + File.separator + user.getId() + ".jpg";					//判断是否已经存在了用户的头像图片					File oldFigure = new File(uploadPath);					if(oldFigure.exists()){						oldFigure.delete();					}					File newFigure = new File(uploadPath);					imageItems.get(0).write(newFigure);					figureUrl = writeURL + user.getId() + ".jpg";					user.setFigureUrl(figureUrl);					userService.updateUser(user);				}			}else{				throw new IllegalArgumentException();			}		}catch(NumberFormatException e){			e.printStackTrace();			ret = 2;			responseVO = new BaseResponseVO(ret, e);		}catch(IllegalArgumentException e){			e.printStackTrace();			ret = 2;			responseVO = new BaseResponseVO(ret, e);		}catch(Exception e){			e.printStackTrace();			ret = 1;			responseVO = new BaseResponseVO(ret, e);		}		try {			responseVO.getHeader().setRet(ret);			String mess = gson.toJson(responseVO);			response.getWriter().print(mess);		} catch (IOException e1) {			e1.printStackTrace();		}	}		/**	 * @company 新和新拓（北京）科技有限公司	 * @author Recoba Gan	 * @createDate 2012 2012-1-2 下午6:42:33	 * @description 通过第三方登录.	用户通过第三方验证成功后，再向服务器发送该请求	 */	@RequestMapping(value = "/user/login_thirdparty", method = RequestMethod.POST, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 })	public void loginUserByThirdparty(HttpServletRequest request,HttpServletResponse response){		int ret = 2;//default as less param		BaseResponseVO responseVO = new BaseResponseVO();		String email = request.getParameter("email");		String snsId = request.getParameter("snsId");		if(StringUtils.isNotBlank(email) && StringUtils.isNotBlank(snsId)){			try{				User user = userService.getUserByEmail(email);				if(user != null){					if(StringUtils.isNotBlank(user.getSnsId()) && user.getSnsId().equals(snsId)){						//login_thirdparty success						ret = 0;//响应正确						UserVO vo = voForUserSelf(user);						InitData initData = new InitData();						initData.setBrands(brandService.getAll());						initData.setOccasions(occasionService.getAllVO());						initData.setTrends(trendService.getAllVO());						initData.setCriterion(criterionService.getAll());						initData.setFriendCount(new FriendCount(								friendshipService.getfollowingCount(user),								friendshipService.getfollowerCount(user)));						InitDataBody initDataBody = new InitDataBody();						initDataBody.setInitData(initData);						initDataBody.setUser(vo);						List<UserVO> followings = new ArrayList<UserVO>();						UserVO tempUserVO = null;						User tempUser = null;						Set<Friendship> followingsShip = user.getFriendshipsForUserId();						for(Friendship friend : followingsShip){							tempUserVO = new UserVO();							//由于hibernate依赖加载默认是支持两层							tempUser = friend.getUserByFollowingId();							tempUserVO.setId(tempUser.getId());							tempUserVO.setNickname(tempUser.getNickname());							followings.add(tempUserVO);						}						initData.setFollowsTags(followings);						responseVO.setBody(initDataBody);					}else{//第三方提供的snsId与注册的时候不匹配						ret = 13;					}				}else{					ret = 11;// 该邮箱不存在				}			}catch(IllegalArgumentException e){				e.printStackTrace();				responseVO = new BaseResponseVO(ret, e);			}catch(Exception e){				e.printStackTrace();				ret = 1;				responseVO = new BaseResponseVO(ret, e);			}		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e1) {			e1.printStackTrace();		}	}		/**	 * @company 新和新拓（北京）科技有限公司	 * @author Recoba Gan	 * @createDate 2012 2012-1-3 上午10:23:11	 * @description 用于客户端查看其他用户信息	 */	@RequestMapping(value = "/user/get_user_info", method = RequestMethod.GET, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 })	public void getUserInfo(HttpServletRequest request,HttpServletResponse response){		int ret = 5;		BaseResponseVO responseVO = null;		if(request.getAttribute("user") != null){			try{				User currentUser = (User)request.getAttribute("user");//当前用户				Long userId = Long.parseLong(request.getParameter("userId"));//需要获取信息的userId				User user = userService.getByPK(userId);				responseVO = new BaseResponseVO();				if(user != null){					UserBrief userBrief = new UserBrief();					userBrief.setId(user.getId());					userBrief.setNickname(user.getNickname());					userBrief.setGender((byte)user.getGender());					userBrief.setIntroduce(user.getIntroduce());					userBrief.setProvince(user.getProvince());					userBrief.setCity(user.getCity());					userBrief.setFigureUrl(user.getFigureUrl());					userBrief.setIsMyFollower(friendshipService.isFollower(currentUser.getId(), user.getId()));					userBrief.setIsMyFollowing(friendshipService.isFollowing(currentUser.getId(), user.getId()));					ret = 0;					UserBody userBody = new UserBody();					userBody.setUserBrief(userBrief);					responseVO.setBody(userBody);				}else{					ret = 11;//查询的用户不存在				}			}catch(NumberFormatException e){				e.printStackTrace();				ret = 2;//参数缺少了				responseVO = new BaseResponseVO(ret, e);			}			catch(Exception e){				e.printStackTrace();				ret = 1;				responseVO = new BaseResponseVO(ret, e);			}		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e1) {			e1.printStackTrace();		}	}		/**	 * @company 新和新拓（北京）科技有限公司	 * @author Recoba Gan	 * @createDate 2012 2012-1-3 下午12:09:48	 * @description 根据昵称和email搜索好友	 */	@RequestMapping(value = "/user/find_user", method = RequestMethod.GET, 			headers = { "version="+ Constants.TIAPS_VERSION_1_0 })	public void findUser(HttpServletRequest request,HttpServletResponse response){		int ret = 2;		BaseResponseVO responseVO = null;		try{			responseVO = new BaseResponseVO();			String searchTerm = request.getParameter("searchTerm");			if(searchTerm!=null)				searchTerm=new String(searchTerm.getBytes("iso-8859-1"), "UTF-8");//			String searchTerm = request.getParameter("searchTerm");//搜索条件			if(StringUtils.isNotBlank(searchTerm)){				int pageSize = 50;				int pageNO = 1;				String countStr = request.getParameter("count");//每页展示多少条记录				String pageStr = request.getParameter("page");//当前是第几页				if(StringUtils.isNotBlank(pageStr)){					pageNO = Integer.parseInt(pageStr);				}				if(StringUtils.isNotBlank(countStr)){					pageSize = Integer.parseInt(countStr);				}				QueryParamVO param = new QueryParamVO();				param.pageNO = pageNO;				param.pageSize = pageSize;				List<User> list = userService.findUser(param, searchTerm);				FindUserBody findBody = null;				UserBrief ub = null;				if(list != null && list.size() > 0){					List<UserBrief> ubList = new ArrayList<UserBrief>();					findBody = new FindUserBody();					for(User user : list){						ub = new UserBrief();						ub.setId(user.getId());						ub.setNickname(user.getNickname());						ub.setIntroduce(user.getIntroduce());						ub.setGender((byte)user.getGender());						ub.setProvince(user.getProvince());						ub.setCity(user.getCity());						ub.setIsMyFollower(false);						ub.setIsMyFollowing(false);						ubList.add(ub);					}					findBody.setUsers(ubList);				}				responseVO.setBody(findBody);				ret = 0;			}		}catch(Exception e){			e.printStackTrace();			ret = 1;			responseVO = new BaseResponseVO(ret, e);		}		responseVO.getHeader().setRet(ret);		try {			response.getWriter().print(gson.toJson(responseVO));		} catch (IOException e1) {			e1.printStackTrace();		}	}		private UserVO bean2VO(User user){		UserVO vo = new UserVO();		vo.setAccessId(user.getAccessId());		vo.setProvince(user.getProvince());		vo.setCity(user.getCity());		vo.setCreateTime(user.getCreateTime());		vo.setDeleted(user.isDeleted());		vo.setEmail(user.getEmail());		vo.setEmailNotifiable(user.getEmailNotifiable());		vo.setFigureUrl(user.getFigureUrl());		vo.setGender(user.getGender());		vo.setNickname(user.getNickname());		vo.setVersion(1);		return vo;	}		/*	 * 转换用户自己需要的信息	 */	private UserVO voForUserSelf(User user){		UserVO vo = new UserVO();		vo.setId(user.getId());		vo.setEmail(user.getEmail());		vo.setAccessId(user.getAccessId());		vo.setNickname(user.getNickname());		vo.setGender(user.getGender());		vo.setMobile(user.getMobile());		vo.setIntroduce(user.getIntroduce());		vo.setProvince(user.getProvince());		vo.setCity(user.getCity());		vo.setFigureUrl(user.getFigureUrl());		vo.setSnsType(user.getSnsType());		vo.setSnsId(user.getSnsId());		vo.setMsgNotifiable(user.getMsgNotifiable());		vo.setEmailNotifiable(user.getEmailNotifiable());		return vo;	}		/*	 * 根据提供的字符串，产生其对应的MD5之后转换base64后的字符串	 */	private String getMD5Base64(String orginalText) throws NoSuchAlgorithmException, UnsupportedEncodingException{		MessageDigest digest = MessageDigest.getInstance("MD5");		digest.update(orginalText.getBytes("UTF-8"));		 byte[] md = digest.digest(); 		 return Base64.encode(md);	}}